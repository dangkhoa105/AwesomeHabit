{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _SafeAreaProviderCompat = _interopRequireDefault(require(\"./SafeAreaProviderCompat\"));\n\nvar _ResourceSavingScene = _interopRequireDefault(require(\"./ResourceSavingScene\"));\n\nvar _BottomTabBar = _interopRequireDefault(require(\"./BottomTabBar\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction SceneContent(_ref) {\n  var isFocused = _ref.isFocused,\n      children = _ref.children,\n      style = _ref.style;\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  return React.createElement(_reactNative.View, {\n    accessibilityElementsHidden: !isFocused,\n    importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n    style: [styles.content, {\n      backgroundColor: colors.background\n    }, style]\n  }, children);\n}\n\nvar BottomTabView = function (_React$Component) {\n  (0, _inherits2.default)(BottomTabView, _React$Component);\n\n  var _super = _createSuper(BottomTabView);\n\n  function BottomTabView() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, BottomTabView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"state\", {\n      loaded: [_this.props.state.routes[_this.props.state.index].key]\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"renderTabBar\", function () {\n      var _this$props = _this.props,\n          _this$props$tabBar = _this$props.tabBar,\n          tabBar = _this$props$tabBar === void 0 ? function (props) {\n        return React.createElement(_BottomTabBar.default, props);\n      } : _this$props$tabBar,\n          tabBarOptions = _this$props.tabBarOptions,\n          state = _this$props.state,\n          navigation = _this$props.navigation,\n          descriptors = _this$props.descriptors;\n      return tabBar((0, _extends2.default)({}, tabBarOptions, {\n        state: state,\n        descriptors: descriptors,\n        navigation: navigation\n      }));\n    });\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(BottomTabView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          state = _this$props2.state,\n          descriptors = _this$props2.descriptors,\n          navigation = _this$props2.navigation,\n          lazy = _this$props2.lazy,\n          _this$props2$detachIn = _this$props2.detachInactiveScreens,\n          detachInactiveScreens = _this$props2$detachIn === void 0 ? true : _this$props2$detachIn,\n          sceneContainerStyle = _this$props2.sceneContainerStyle;\n      var routes = state.routes;\n      var loaded = this.state.loaded;\n      return React.createElement(_native.NavigationHelpersContext.Provider, {\n        value: navigation\n      }, React.createElement(_SafeAreaProviderCompat.default, null, React.createElement(_reactNative.View, {\n        style: styles.container\n      }, React.createElement(_reactNativeScreens.ScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.pages\n      }, routes.map(function (route, index) {\n        var descriptor = descriptors[route.key];\n        var unmountOnBlur = descriptor.options.unmountOnBlur;\n        var isFocused = state.index === index;\n\n        if (unmountOnBlur && !isFocused) {\n          return null;\n        }\n\n        if (lazy && !loaded.includes(route.key) && !isFocused) {\n          return null;\n        }\n\n        return React.createElement(_ResourceSavingScene.default, {\n          key: route.key,\n          style: _reactNative.StyleSheet.absoluteFill,\n          isVisible: isFocused,\n          enabled: detachInactiveScreens\n        }, React.createElement(SceneContent, {\n          isFocused: isFocused,\n          style: sceneContainerStyle\n        }, descriptor.render()));\n      })), this.renderTabBar())));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var focusedRouteKey = nextProps.state.routes[nextProps.state.index].key;\n      return {\n        loaded: prevState.loaded.includes(focusedRouteKey) ? prevState.loaded : [].concat((0, _toConsumableArray2.default)(prevState.loaded), [focusedRouteKey])\n      };\n    }\n  }]);\n  return BottomTabView;\n}(React.Component);\n\nexports.default = BottomTabView;\n\n_defineProperty(BottomTabView, \"defaultProps\", {\n  lazy: true\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  },\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["BottomTabView.tsx"],"names":["style","colors","isFocused","styles","backgroundColor","background","BottomTabView","React","lazy","focusedRouteKey","nextProps","loaded","prevState","tabBar","props","descriptors","state","navigation","detachInactiveScreens","sceneContainerStyle","routes","container","pages","descriptor","route","unmountOnBlur","StyleSheet","flex","overflow","content"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\n\nimport {\n  NavigationHelpersContext,\n  ParamListBase,\n  TabNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport BottomTabBar from './BottomTabBar';\nimport type {\n  BottomTabNavigationConfig,\n  BottomTabDescriptorMap,\n  BottomTabNavigationHelpers,\n  BottomTabBarProps,\n} from '../types';\n\ntype Props = BottomTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: BottomTabNavigationHelpers;\n  descriptors: BottomTabDescriptorMap;\n};\n\ntype State = {\n  loaded: string[];\n};\n\nfunction SceneContent({\n  isFocused,\n  children,\n  style,\n}: {\n  isFocused: boolean;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n}) {\n  const { colors } = useTheme();\n\n  return (\n    <View\n      accessibilityElementsHidden={!isFocused}\n      importantForAccessibility={isFocused ? 'auto' : 'no-hide-descendants'}\n      style={[styles.content, { backgroundColor: colors.background }, style]}\n    >\n      {children}\n    </View>\n  );\n}\n\nexport default class BottomTabView extends React.Component<Props, State> {\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const focusedRouteKey = nextProps.state.routes[nextProps.state.index].key;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(focusedRouteKey)\n        ? prevState.loaded\n        : [...prevState.loaded, focusedRouteKey],\n    };\n  }\n\n  state: State = {\n    loaded: [this.props.state.routes[this.props.state.index].key],\n  };\n\n  private renderTabBar = () => {\n    const {\n      tabBar = (props: BottomTabBarProps) => <BottomTabBar {...props} />,\n      tabBarOptions,\n      state,\n      navigation,\n      descriptors,\n    } = this.props;\n    return tabBar({\n      ...tabBarOptions,\n      state: state,\n      descriptors: descriptors,\n      navigation: navigation,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      descriptors,\n      navigation,\n      lazy,\n      detachInactiveScreens = true,\n      sceneContainerStyle,\n    } = this.props;\n    const { routes } = state;\n    const { loaded } = this.state;\n\n    return (\n      <NavigationHelpersContext.Provider value={navigation}>\n        <SafeAreaProviderCompat>\n          <View style={styles.container}>\n            <ScreenContainer\n              // @ts-ignore\n              enabled={detachInactiveScreens}\n              style={styles.pages}\n            >\n              {routes.map((route, index) => {\n                const descriptor = descriptors[route.key];\n                const { unmountOnBlur } = descriptor.options;\n                const isFocused = state.index === index;\n\n                if (unmountOnBlur && !isFocused) {\n                  return null;\n                }\n\n                if (lazy && !loaded.includes(route.key) && !isFocused) {\n                  // Don't render a screen if we've never navigated to it\n                  return null;\n                }\n\n                return (\n                  <ResourceSavingScene\n                    key={route.key}\n                    style={StyleSheet.absoluteFill}\n                    isVisible={isFocused}\n                    enabled={detachInactiveScreens}\n                  >\n                    <SceneContent\n                      isFocused={isFocused}\n                      style={sceneContainerStyle}\n                    >\n                      {descriptor.render()}\n                    </SceneContent>\n                  </ResourceSavingScene>\n                );\n              })}\n            </ScreenContainer>\n            {this.renderTabBar()}\n          </View>\n        </SafeAreaProviderCompat>\n      </NavigationHelpersContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  pages: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}